
import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session?.user?.id || session.user.role !== 'ADMIN') {
      return NextResponse.json({ error: 'No autorizado - Se requieren permisos de administrador' }, { status: 401 });
    }

    console.log('üîç Iniciando proceso de detecci√≥n autom√°tica de morosidad...');

    const today = new Date();
    today.setHours(0, 0, 0, 0);

    // Obtener configuraci√≥n de morosidad (crearla si no existe)
    let settings = await prisma.delinquencySettings.findFirst();
    if (!settings) {
      settings = await prisma.delinquencySettings.create({
        data: {}
      });
    }

    // 1. Buscar pagos de financiamiento vencidos
    const overdueFinancingPayments = await prisma.financingPayment.findMany({
      where: {
        status: 'Pendiente',
        dueDate: {
          lt: today
        }
      },
      include: {
        financingPlan: {
          include: {
            patient: true
          }
        }
      }
    });

    console.log(`üí≥ Encontrados ${overdueFinancingPayments.length} pagos de financiamiento vencidos`);

    // 2. Buscar facturas vencidas
    const overdueInvoices = await prisma.invoice.findMany({
      where: {
        status: {
          in: ['Pendiente', 'Parcialmente Pagada']
        },
        dueDate: {
          not: null,
          lt: today
        }
      },
      include: {
        patient: true,
        payments: true
      }
    });

    console.log(`üìÑ Encontradas ${overdueInvoices.length} facturas vencidas`);

    const createdNotifications = [];

    // Procesar pagos de financiamiento vencidos
    for (const payment of overdueFinancingPayments) {
      const daysOverdue = Math.floor((today.getTime() - payment.dueDate.getTime()) / (1000 * 60 * 60 * 24));
      
      // Verificar si ya existe una notificaci√≥n para este pago
      const existingNotification = await prisma.delinquencyNotification.findFirst({
        where: {
          financingPaymentId: payment.id,
          status: {
            not: 'Resuelto'
          }
        }
      });

      if (!existingNotification) {
        // Determinar tipo y prioridad seg√∫n d√≠as de mora
        let type = 'payment_overdue';
        let priority = 'Media';
        let title = `Pago vencido - Cuota ${payment.paymentNumber}`;
        
        if (daysOverdue >= 30) {
          priority = 'Cr√≠tica';
          type = 'final_notice';
          title = `Aviso final - Cuota ${payment.paymentNumber} (${daysOverdue} d√≠as de mora)`;
        } else if (daysOverdue >= 15) {
          priority = 'Alta';
          title = `Segundo aviso - Cuota ${payment.paymentNumber} (${daysOverdue} d√≠as de mora)`;
        } else if (daysOverdue >= 7) {
          priority = 'Media';
          title = `Primer aviso - Cuota ${payment.paymentNumber} (${daysOverdue} d√≠as de mora)`;
        }

        // Calcular recargos por mora si est√°n habilitados
        let lateFeeAmount = 0;
        if (settings.enableLateFees && daysOverdue > 0) {
          if (settings.lateFeeType === 'fixed') {
            lateFeeAmount = parseFloat(settings.lateFeeAmount.toString());
          } else if (settings.lateFeeType === 'percentage') {
            const percentage = parseFloat(settings.lateFeeAmount.toString()) / 100;
            lateFeeAmount = parseFloat(payment.remainingAmount.toString()) * percentage;
          }
        }

        const description = `El pago n√∫mero ${payment.paymentNumber} del plan de financiamiento "${payment.financingPlan.title}" est√° vencido desde hace ${daysOverdue} d√≠as. ` +
          `Monto original: $${payment.scheduledAmount}, ` +
          `Monto pendiente: $${payment.remainingAmount}` +
          (lateFeeAmount > 0 ? `, Recargo por mora: $${lateFeeAmount}` : '');

        const totalOwed = parseFloat(payment.remainingAmount.toString()) + lateFeeAmount;

        const notification = await prisma.delinquencyNotification.create({
          data: {
            patientId: payment.financingPlan.patientId,
            financingPlanId: payment.financingPlanId,
            financingPaymentId: payment.id,
            type,
            title,
            description,
            originalAmount: parseFloat(payment.scheduledAmount.toString()),
            overdueAmount: parseFloat(payment.remainingAmount.toString()),
            lateFeeAmount,
            totalOwed,
            originalDueDate: payment.dueDate,
            daysOverdue,
            priority,
            autoGenerated: true,
            autoSend: settings.autoSendNotices,
            status: 'Pendiente'
          }
        });

        createdNotifications.push(notification);

        // Aplicar recargo por mora al pago si est√° habilitado
        if (lateFeeAmount > 0) {
          await prisma.financingPayment.update({
            where: { id: payment.id },
            data: {
              lateFee: lateFeeAmount,
              remainingAmount: totalOwed
            }
          });
        }
      }
    }

    // Procesar facturas vencidas
    for (const invoice of overdueInvoices) {
      if (!invoice.dueDate) continue;
      
      const daysOverdue = Math.floor((today.getTime() - invoice.dueDate.getTime()) / (1000 * 60 * 60 * 24));
      
      // Calcular monto pendiente
      const totalPaid = invoice.payments.reduce((sum, payment) => sum + parseFloat(payment.amount.toString()), 0);
      const remainingAmount = parseFloat(invoice.total.toString()) - totalPaid;
      
      if (remainingAmount <= 0) continue; // Factura ya est√° pagada

      // Verificar si ya existe una notificaci√≥n para esta factura
      const existingNotification = await prisma.delinquencyNotification.findFirst({
        where: {
          invoiceId: invoice.id,
          status: {
            not: 'Resuelto'
          }
        }
      });

      if (!existingNotification) {
        let type = 'invoice_overdue';
        let priority = 'Media';
        let title = `Factura vencida - ${invoice.invoiceNumber}`;
        
        if (daysOverdue >= 30) {
          priority = 'Cr√≠tica';
          type = 'final_notice';
          title = `Aviso final - Factura ${invoice.invoiceNumber} (${daysOverdue} d√≠as de mora)`;
        } else if (daysOverdue >= 15) {
          priority = 'Alta';
          title = `Segundo aviso - Factura ${invoice.invoiceNumber} (${daysOverdue} d√≠as de mora)`;
        } else if (daysOverdue >= 7) {
          priority = 'Media';
          title = `Primer aviso - Factura ${invoice.invoiceNumber} (${daysOverdue} d√≠as de mora)`;
        }

        // Calcular recargos por mora
        let lateFeeAmount = 0;
        if (settings.enableLateFees && daysOverdue > 0) {
          if (settings.lateFeeType === 'fixed') {
            lateFeeAmount = parseFloat(settings.lateFeeAmount.toString());
          } else if (settings.lateFeeType === 'percentage') {
            const percentage = parseFloat(settings.lateFeeAmount.toString()) / 100;
            lateFeeAmount = remainingAmount * percentage;
          }
        }

        const description = `La factura ${invoice.invoiceNumber} est√° vencida desde hace ${daysOverdue} d√≠as. ` +
          `Monto total: $${invoice.total}, ` +
          `Monto pagado: $${totalPaid}, ` +
          `Monto pendiente: $${remainingAmount}` +
          (lateFeeAmount > 0 ? `, Recargo por mora: $${lateFeeAmount}` : '');

        const totalOwed = remainingAmount + lateFeeAmount;

        const notification = await prisma.delinquencyNotification.create({
          data: {
            patientId: invoice.patientId,
            invoiceId: invoice.id,
            type,
            title,
            description,
            originalAmount: parseFloat(invoice.total.toString()),
            overdueAmount: remainingAmount,
            lateFeeAmount,
            totalOwed,
            originalDueDate: invoice.dueDate,
            daysOverdue,
            priority,
            autoGenerated: true,
            autoSend: settings.autoSendNotices,
            status: 'Pendiente'
          }
        });

        createdNotifications.push(notification);
      }
    }

    console.log(`‚úÖ Proceso completado: ${createdNotifications.length} notificaciones de morosidad creadas`);

    return NextResponse.json({
      message: 'Proceso de detecci√≥n autom√°tica completado',
      created: createdNotifications.length,
      overdueFinancingPayments: overdueFinancingPayments.length,
      overdueInvoices: overdueInvoices.length,
      notifications: createdNotifications
    });
  } catch (error) {
    console.error('Error generating delinquency notifications:', error);
    return NextResponse.json(
      { error: 'Error interno del servidor' },
      { status: 500 }
    );
  }
}

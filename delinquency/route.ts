
import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session?.user?.id) {
      return NextResponse.json({ error: 'No autorizado' }, { status: 401 });
    }

    const { searchParams } = new URL(request.url);
    const status = searchParams.get('status');
    const priority = searchParams.get('priority');
    const patientId = searchParams.get('patientId');
    const assignedTo = searchParams.get('assignedTo');

    let where: any = {};
    
    if (status) {
      where.status = status;
    }
    
    if (priority) {
      where.priority = priority;
    }
    
    if (patientId) {
      where.patientId = patientId;
    }
    
    if (assignedTo) {
      where.assignedTo = assignedTo;
    }

    const delinquencyNotifications = await prisma.delinquencyNotification.findMany({
      where,
      include: {
        patient: {
          select: {
            id: true,
            firstName: true,
            lastName: true,
            numeroExpediente: true,
            email: true,
            phone: true,
          }
        },
        financingPlan: {
          select: {
            id: true,
            planNumber: true,
            title: true,
            totalAmount: true,
          }
        },
        financingPayment: {
          select: {
            id: true,
            paymentNumber: true,
            scheduledAmount: true,
            dueDate: true,
          }
        },
        invoice: {
          select: {
            id: true,
            invoiceNumber: true,
            total: true,
            dueDate: true,
          }
        },
        assignedUser: {
          select: {
            id: true,
            firstName: true,
            lastName: true,
            email: true,
          }
        },
        actions: {
          select: {
            id: true,
            actionType: true,
            description: true,
            outcome: true,
            createdAt: true,
            user: {
              select: {
                firstName: true,
                lastName: true,
              }
            }
          },
          orderBy: {
            createdAt: 'desc'
          }
        }
      },
      orderBy: [
        { priority: 'desc' },
        { daysOverdue: 'desc' },
        { createdAt: 'desc' }
      ]
    });

    return NextResponse.json(delinquencyNotifications);
  } catch (error) {
    console.error('Error fetching delinquency notifications:', error);
    return NextResponse.json(
      { error: 'Error interno del servidor' },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session?.user?.id) {
      return NextResponse.json({ error: 'No autorizado' }, { status: 401 });
    }

    const data = await request.json();
    
    const {
      patientId,
      financingPlanId,
      financingPaymentId,
      invoiceId,
      type,
      title,
      description,
      originalAmount,
      overdueAmount,
      lateFeeAmount,
      totalOwed,
      originalDueDate,
      daysOverdue,
      priority = 'Media',
      assignedTo,
      nextActionDate,
      autoGenerated = false,
      autoSend = false
    } = data;

    // Validaciones básicas
    if (!patientId || !type || !title || !description) {
      return NextResponse.json(
        { error: 'Paciente, tipo, título y descripción son requeridos' },
        { status: 400 }
      );
    }

    // Crear la notificación de morosidad
    const delinquencyNotification = await prisma.delinquencyNotification.create({
      data: {
        patientId,
        financingPlanId,
        financingPaymentId,
        invoiceId,
        type,
        title,
        description,
        originalAmount: parseFloat(originalAmount.toString()),
        overdueAmount: parseFloat(overdueAmount.toString()),
        lateFeeAmount: parseFloat(lateFeeAmount?.toString() || '0'),
        totalOwed: parseFloat(totalOwed.toString()),
        originalDueDate: new Date(originalDueDate),
        daysOverdue: parseInt(daysOverdue.toString()),
        priority,
        assignedTo,
        nextActionDate: nextActionDate ? new Date(nextActionDate) : null,
        autoGenerated,
        autoSend,
        status: 'Pendiente'
      },
      include: {
        patient: {
          select: {
            firstName: true,
            lastName: true,
            numeroExpediente: true,
            email: true,
            phone: true,
          }
        },
        financingPlan: true,
        financingPayment: true,
        invoice: true
      }
    });

    return NextResponse.json(delinquencyNotification, { status: 201 });
  } catch (error) {
    console.error('Error creating delinquency notification:', error);
    return NextResponse.json(
      { error: 'Error interno del servidor' },
      { status: 500 }
    );
  }
}
